{"name": "test_successful_first_edit_main_safe", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=126.0.6478.127)\nStacktrace:\n0   chromedriver                        0x00000001032faa80 chromedriver + 4385408\n1   chromedriver                        0x00000001032f338c chromedriver + 4354956\n2   chromedriver                        0x0000000102f10b0c chromedriver + 281356\n3   chromedriver                        0x0000000102eebaf0 chromedriver + 129776\n4   chromedriver                        0x0000000102f78314 chromedriver + 705300\n5   chromedriver                        0x0000000102f8b438 chromedriver + 783416\n6   chromedriver                        0x0000000102f47eec chromedriver + 507628\n7   chromedriver                        0x0000000102f488c4 chromedriver + 510148\n8   chromedriver                        0x00000001032c243c chromedriver + 4154428\n9   chromedriver                        0x00000001032c6ea0 chromedriver + 4173472\n10  chromedriver                        0x00000001032a7ff8 chromedriver + 4046840\n11  chromedriver                        0x00000001032c778c chromedriver + 4175756\n12  chromedriver                        0x000000010329afb8 chromedriver + 3993528\n13  chromedriver                        0x00000001032e521c chromedriver + 4297244\n14  chromedriver                        0x00000001032e5398 chromedriver + 4297624\n15  chromedriver                        0x00000001032f2f84 chromedriver + 4353924\n16  libsystem_pthread.dylib             0x00000001861f2f94 _pthread_start + 136\n17  libsystem_pthread.dylib             0x00000001861edd34 thread_start + 8", "trace": "self = <test_1_login.TestProfile object at 0x102db6f30>\n\n    def test_successful_first_edit_main_safe(self):\n        self.navigate_main_safe_edit()\n        sleep(1)\n        Driver.screenshot(self.driver, \"../screenshots/screenshots_1_login\", \"test_2_1_edit_safe_success.png\")\n        self.enter_main_safe_name()\n        sleep(1)\n        self.enter_main_safe_balance()\n        sleep(1)\n>       self.select_main_safe_opening_date()\n\ntest_1_login.py:133: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_1_login.py:110: in select_main_safe_opening_date\n    self.page.find_input_opening_main_safe_date()\n../pages/page_1_login.py:116: in find_input_opening_main_safe_date\n    self.input_opening_main_safe_date = Driver.wait(self.driver, By.XPATH, '//*[@id=\"tabSafeCommon\"]/form/div/div[2]/div[1]/span/span/input[1]', \"click\", 5)\n../utilities/Driver.py:16: in wait\n    return WebDriverWait(driver, timeout).until(ec.element_to_be_clickable((selector, element)))\n../.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:96: in until\n    value = method(self._driver)\n../.venv/lib/python3.12/site-packages/selenium/webdriver/support/expected_conditions.py:363: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x102b58260>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...0001861f2f94 _pthread_start + 136\\\\n17  libsystem_pthread.dylib             0x00000001861edd34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=126.0.6478.127)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001032faa80 chromedriver + 4385408\nE       1   chromedriver                        0x00000001032f338c chromedriver + 4354956\nE       2   chromedriver                        0x0000000102f10b0c chromedriver + 281356\nE       3   chromedriver                        0x0000000102eebaf0 chromedriver + 129776\nE       4   chromedriver                        0x0000000102f78314 chromedriver + 705300\nE       5   chromedriver                        0x0000000102f8b438 chromedriver + 783416\nE       6   chromedriver                        0x0000000102f47eec chromedriver + 507628\nE       7   chromedriver                        0x0000000102f488c4 chromedriver + 510148\nE       8   chromedriver                        0x00000001032c243c chromedriver + 4154428\nE       9   chromedriver                        0x00000001032c6ea0 chromedriver + 4173472\nE       10  chromedriver                        0x00000001032a7ff8 chromedriver + 4046840\nE       11  chromedriver                        0x00000001032c778c chromedriver + 4175756\nE       12  chromedriver                        0x000000010329afb8 chromedriver + 3993528\nE       13  chromedriver                        0x00000001032e521c chromedriver + 4297244\nE       14  chromedriver                        0x00000001032e5398 chromedriver + 4297624\nE       15  chromedriver                        0x00000001032f2f84 chromedriver + 4353924\nE       16  libsystem_pthread.dylib             0x00000001861f2f94 _pthread_start + 136\nE       17  libsystem_pthread.dylib             0x00000001861edd34 thread_start + 8\n\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException"}, "attachments": [{"name": "stdout", "source": "a6f0a6ac-f050-4caf-82e5-8870b79b4059-attachment.txt", "type": "text/plain"}], "start": 1720210428344, "stop": 1720210440712, "uuid": "b3c313ca-b029-4f98-b4a0-24e714f534c6", "historyId": "be46f95421fae00b613d1f02c46acecf", "testCaseId": "be46f95421fae00b613d1f02c46acecf", "fullName": "tests.test_1_login.TestProfile#test_successful_first_edit_main_safe", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_1_login"}, {"name": "subSuite", "value": "TestProfile"}, {"name": "host", "value": "Ismets-Air.home"}, {"name": "thread", "value": "17329-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_1_login"}]}