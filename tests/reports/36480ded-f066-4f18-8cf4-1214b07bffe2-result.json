{"name": "test_successful_first_edit_main_safe", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_1_login.TestProfile object at 0x106830a10>\n\n    def test_successful_first_edit_main_safe(self):\n        self.navigate_main_safe_edit()\n        sleep(1)\n        Driver.screenshot(self.driver, \"../screenshots/screenshots_1_login\", \"test_2_1_edit_safe_success.png\")\n        self.enter_main_safe_balance()\n        sleep(1)\n>       self.select_main_safe_opening_date()\n\ntest_1_login.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_1_login.py:107: in select_main_safe_opening_date\n    self.page.find_input_opening_main_safe_date()\n../pages/page_1_login.py:116: in find_input_opening_main_safe_date\n    self.input_opening_main_safe_date = Driver.wait(self.driver, By.XPATH, '//*[@id=\"tabSafeCommon\"]/form/div/div[2]/div[1]/span/span/input[1]', \"click\", 5)\n../utilities/Driver.py:16: in wait\n    return WebDriverWait(driver, timeout).until(ec.element_to_be_clickable((selector, element)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ca3963a43dd68b6678469f7fbe31eeca\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x106933420>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException"}, "attachments": [{"name": "stdout", "source": "072a41fe-05fc-44b3-bc06-877696259a69-attachment.txt", "type": "text/plain"}], "start": 1720210920076, "stop": 1720210936338, "uuid": "c3f27805-c359-43f4-a599-3a0e0697d0ea", "historyId": "be46f95421fae00b613d1f02c46acecf", "testCaseId": "be46f95421fae00b613d1f02c46acecf", "fullName": "tests.test_1_login.TestProfile#test_successful_first_edit_main_safe", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_1_login"}, {"name": "subSuite", "value": "TestProfile"}, {"name": "host", "value": "Ismets-Air.home"}, {"name": "thread", "value": "17844-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_1_login"}]}